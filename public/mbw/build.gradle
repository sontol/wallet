apply plugin: 'com.android.application'

repositories {
    mavenCentral()
}


buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath androidBuildArtifact
    }
}

dependencies {
    androidTestCompile 'junit:junit:' + junitVersion
    compile project(':public:zxing-android')
    compile project(':public:wapi')
    compile project(':public:lt-api')
    compile project(':public:mbwlib')

    compile 'com.squareup:otto:1.3.4'
    compile 'com.android.support:appcompat-v7:19.1.0'
    compile 'com.android.support:support-v4:19.1.0'
    compile 'com.google.android.gms:play-services-base:6.5.+'
    compile 'org.ocpsoft.prettytime:prettytime:3.2.5.Final'
}

def commonDebugKeystore = file("../../keystore_debug")

android {

    dexOptions {
        jumboMode true
    }

    lintOptions{
        disable 'InvalidPackage'
        //todo configure lint.xml for okio InvalidPackage
    }

    packagingOptions {
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/DEPENDENCIES'

    }


    compileOptions {
        sourceCompatibility = 'VERSION_1_6'
        targetCompatibility = 'VERSION_1_6'
    }


    compileSdkVersion 19
    buildToolsVersion androidSdkBuildVersion

    defaultConfig {
        minSdkVersion 9
        targetSdkVersion 19

        versionCode 21011
        versionName '2.1.1'
    }

    signingConfigs {
        release {
            keyAlias = ''
        }
        testnetplay {
            keyAlias = ''
        }
        commonDebug {
            storeFile commonDebugKeystore
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
    }

    buildTypes {

/*
        debug {
            debuggable true
            runProguard true
            proguardFile 'mbw.pro'
        }
*/

        release {
//            debuggable true
            minifyEnabled true
            proguardFile 'mbw.pro'
            applicationVariants.all { variant ->
                variant.outputs.each { output ->
                    def file = output.outputFile
                    if (file != null && file.name.endsWith('.apk')) {
                        def versionExtension = "-" + defaultConfig.versionName + "build" + defaultConfig.versionCode + ".apk"
                        output.outputFile = new File(file.parent, file.name.replace(".apk", versionExtension))
                    }
                }
            }
        }
    }

    productFlavors {
        bitsofgold {
            applicationId 'il.co.bitsofgold.wallet'
            versionName = defaultConfig.versionName + '-BOG'
            signingConfig signingConfigs.release
        }
        prodnet {
            applicationId 'com.mycelium.wallet'
            versionName = defaultConfig.versionName
            signingConfig signingConfigs.release
        }
        dev {
            applicationId 'com.mycelium.devwallet'
            signingConfig signingConfigs.debug
        }
        testnet {
            applicationId 'com.mycelium.testnetwallet'
            versionName = defaultConfig.versionName + '-TESTNET'
            signingConfig signingConfigs.testnetplay
        }
    }


    sourceSets {
        androidTest {
            java.srcDirs = ['instrumentTest/java']
        }
    }

}

if (commonDebugKeystore.exists()) {
    android.buildTypes.debug.signingConfig = android.signingConfigs.commonDebug
    android.productFlavors.dev.signingConfig = android.signingConfigs.commonDebug
    logger.info("keytore_debug detected")
}



if (project.hasProperty('prodKeyStore') &&
        project.hasProperty('prodKeyAlias') &&
        project.hasProperty('prodKeyStorePassword') &&
        project.hasProperty('prodKeyAliasPassword')) {
    android.signingConfigs.release.storeFile = file('../../' + prodKeyStore)
    android.signingConfigs.release.keyAlias = prodKeyAlias
    android.signingConfigs.release.storePassword = prodKeyStorePassword
    android.signingConfigs.release.keyPassword = prodKeyAliasPassword
} else {
    android.productFlavors.prodnet.signingConfig = null
    android.productFlavors.bitsofgold.signingConfig = null
}

if (project.hasProperty('testKeyStore') &&
        project.hasProperty('testKeyAlias') &&
        project.hasProperty('testKeyStorePassword') &&
        project.hasProperty('testKeyAliasPassword')) {
    android.signingConfigs.testnetplay.storeFile = file('../../' + testKeyStore)
    android.signingConfigs.testnetplay.keyAlias = testKeyAlias
    android.signingConfigs.testnetplay.storePassword = testKeyStorePassword
    android.signingConfigs.testnetplay.keyPassword = testKeyAliasPassword
} else {
    android.productFlavors.testnet.signingConfig = null
}
